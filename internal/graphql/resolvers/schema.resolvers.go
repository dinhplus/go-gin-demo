package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"my-gin-app/internal/graphql/generated"
	"my-gin-app/internal/model"
	"my-gin-app/internal/service"
	"strconv"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input generated.CreateUserInput) (*model.User, error) {
	user := &model.User{
		Name:         input.Name,
		Email:        input.Email,
		Password:     input.Password,
		DepartmentID: input.DepartmentID,
		PositionID:   input.PositionID,
		StackID:      input.StackID,
		RoleID:       input.RoleID,
	}

	err := service.AddUser(user)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input generated.UpdateUserInput) (*model.User, error) {
	// For now, return not implemented as we need to check existing update functions
	return nil, fmt.Errorf("not implemented: UpdateUser - updateUser")
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	// For now, return not implemented as we need to check existing delete functions
	return false, fmt.Errorf("not implemented: DeleteUser - deleteUser")
}

// CreateDepartment is the resolver for the createDepartment field.
func (r *mutationResolver) CreateDepartment(ctx context.Context, input generated.CreateDepartmentInput) (*model.Department, error) {
	panic(fmt.Errorf("not implemented: CreateDepartment - createDepartment"))
}

// UpdateDepartment is the resolver for the updateDepartment field.
func (r *mutationResolver) UpdateDepartment(ctx context.Context, id string, input generated.UpdateDepartmentInput) (*model.Department, error) {
	panic(fmt.Errorf("not implemented: UpdateDepartment - updateDepartment"))
}

// DeleteDepartment is the resolver for the deleteDepartment field.
func (r *mutationResolver) DeleteDepartment(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteDepartment - deleteDepartment"))
}

// CreatePosition is the resolver for the createPosition field.
func (r *mutationResolver) CreatePosition(ctx context.Context, input generated.CreatePositionInput) (*model.Position, error) {
	panic(fmt.Errorf("not implemented: CreatePosition - createPosition"))
}

// UpdatePosition is the resolver for the updatePosition field.
func (r *mutationResolver) UpdatePosition(ctx context.Context, id string, input generated.UpdatePositionInput) (*model.Position, error) {
	panic(fmt.Errorf("not implemented: UpdatePosition - updatePosition"))
}

// DeletePosition is the resolver for the deletePosition field.
func (r *mutationResolver) DeletePosition(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeletePosition - deletePosition"))
}

// CreateStack is the resolver for the createStack field.
func (r *mutationResolver) CreateStack(ctx context.Context, input generated.CreateStackInput) (*model.Stack, error) {
	panic(fmt.Errorf("not implemented: CreateStack - createStack"))
}

// UpdateStack is the resolver for the updateStack field.
func (r *mutationResolver) UpdateStack(ctx context.Context, id string, input generated.UpdateStackInput) (*model.Stack, error) {
	panic(fmt.Errorf("not implemented: UpdateStack - updateStack"))
}

// DeleteStack is the resolver for the deleteStack field.
func (r *mutationResolver) DeleteStack(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteStack - deleteStack"))
}

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input generated.CreateRoleInput) (*model.Role, error) {
	panic(fmt.Errorf("not implemented: CreateRole - createRole"))
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, id string, input generated.UpdateRoleInput) (*model.Role, error) {
	panic(fmt.Errorf("not implemented: UpdateRole - updateRole"))
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteRole - deleteRole"))
}

// CreatePermission is the resolver for the createPermission field.
func (r *mutationResolver) CreatePermission(ctx context.Context, input generated.CreatePermissionInput) (*model.Permission, error) {
	panic(fmt.Errorf("not implemented: CreatePermission - createPermission"))
}

// UpdatePermission is the resolver for the updatePermission field.
func (r *mutationResolver) UpdatePermission(ctx context.Context, id string, input generated.UpdatePermissionInput) (*model.Permission, error) {
	panic(fmt.Errorf("not implemented: UpdatePermission - updatePermission"))
}

// DeletePermission is the resolver for the deletePermission field.
func (r *mutationResolver) DeletePermission(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeletePermission - deletePermission"))
}

// CreateResource is the resolver for the createResource field.
func (r *mutationResolver) CreateResource(ctx context.Context, input generated.CreateResourceInput) (*model.Resource, error) {
	panic(fmt.Errorf("not implemented: CreateResource - createResource"))
}

// UpdateResource is the resolver for the updateResource field.
func (r *mutationResolver) UpdateResource(ctx context.Context, id string, input generated.UpdateResourceInput) (*model.Resource, error) {
	panic(fmt.Errorf("not implemented: UpdateResource - updateResource"))
}

// DeleteResource is the resolver for the deleteResource field.
func (r *mutationResolver) DeleteResource(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteResource - deleteResource"))
}

// CreateFeatureFlag is the resolver for the createFeatureFlag field.
func (r *mutationResolver) CreateFeatureFlag(ctx context.Context, input generated.CreateFeatureFlagInput) (*model.FeatureFlag, error) {
	panic(fmt.Errorf("not implemented: CreateFeatureFlag - createFeatureFlag"))
}

// UpdateFeatureFlag is the resolver for the updateFeatureFlag field.
func (r *mutationResolver) UpdateFeatureFlag(ctx context.Context, id string, input generated.UpdateFeatureFlagInput) (*model.FeatureFlag, error) {
	panic(fmt.Errorf("not implemented: UpdateFeatureFlag - updateFeatureFlag"))
}

// DeleteFeatureFlag is the resolver for the deleteFeatureFlag field.
func (r *mutationResolver) DeleteFeatureFlag(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteFeatureFlag - deleteFeatureFlag"))
}

// Name is the resolver for the name field.
func (r *permissionResolver) Name(ctx context.Context, obj *model.Permission) (string, error) {
	panic(fmt.Errorf("not implemented: Name - name"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, limit *int, offset *int) ([]*model.User, error) {
	users, err := service.GetAllUsers()
	if err != nil {
		return nil, err
	}

	// Convert []model.User to []*model.User
	result := make([]*model.User, len(users))
	for i := range users {
		result[i] = &users[i]
	}

	// Handle pagination if needed (simplified for now)
	return result, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	userID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %v", err)
	}

	// For now, we'll get all users and find the one we need
	// In a real implementation, you'd add a FindUserByID function to the service
	users, err := service.GetAllUsers()
	if err != nil {
		return nil, err
	}

	for _, user := range users {
		if user.ID == userID {
			return &user, nil
		}
	}

	return nil, fmt.Errorf("user not found")
}

// UserByEmail is the resolver for the userByEmail field.
func (r *queryResolver) UserByEmail(ctx context.Context, email string) (*model.User, error) {
	// We'll need to implement this properly in the service layer
	users, err := service.GetAllUsers()
	if err != nil {
		return nil, err
	}

	for _, user := range users {
		if user.Email == email {
			return &user, nil
		}
	}

	return nil, fmt.Errorf("user not found")
}

// Departments is the resolver for the departments field.
func (r *queryResolver) Departments(ctx context.Context, limit *int, offset *int) ([]*model.Department, error) {
	departments, err := service.GetAllDepartments()
	if err != nil {
		return nil, err
	}

	// Convert []model.Department to []*model.Department
	result := make([]*model.Department, len(departments))
	for i := range departments {
		result[i] = &departments[i]
	}

	return result, nil
}

// Department is the resolver for the department field.
func (r *queryResolver) Department(ctx context.Context, id string) (*model.Department, error) {
	deptID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid department ID: %v", err)
	}

	departments, err := service.GetAllDepartments()
	if err != nil {
		return nil, err
	}

	for _, dept := range departments {
		if dept.ID == deptID {
			return &dept, nil
		}
	}

	return nil, fmt.Errorf("department not found")
}

// Positions is the resolver for the positions field.
func (r *queryResolver) Positions(ctx context.Context, limit *int, offset *int) ([]*model.Position, error) {
	panic(fmt.Errorf("not implemented: Positions - positions"))
}

// Position is the resolver for the position field.
func (r *queryResolver) Position(ctx context.Context, id string) (*model.Position, error) {
	panic(fmt.Errorf("not implemented: Position - position"))
}

// Stacks is the resolver for the stacks field.
func (r *queryResolver) Stacks(ctx context.Context, limit *int, offset *int) ([]*model.Stack, error) {
	panic(fmt.Errorf("not implemented: Stacks - stacks"))
}

// Stack is the resolver for the stack field.
func (r *queryResolver) Stack(ctx context.Context, id string) (*model.Stack, error) {
	panic(fmt.Errorf("not implemented: Stack - stack"))
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context, limit *int, offset *int) ([]*model.Role, error) {
	panic(fmt.Errorf("not implemented: Roles - roles"))
}

// Role is the resolver for the role field.
func (r *queryResolver) Role(ctx context.Context, id string) (*model.Role, error) {
	panic(fmt.Errorf("not implemented: Role - role"))
}

// Permissions is the resolver for the permissions field.
func (r *queryResolver) Permissions(ctx context.Context, limit *int, offset *int) ([]*model.Permission, error) {
	panic(fmt.Errorf("not implemented: Permissions - permissions"))
}

// Permission is the resolver for the permission field.
func (r *queryResolver) Permission(ctx context.Context, id string) (*model.Permission, error) {
	panic(fmt.Errorf("not implemented: Permission - permission"))
}

// Resources is the resolver for the resources field.
func (r *queryResolver) Resources(ctx context.Context, limit *int, offset *int) ([]*model.Resource, error) {
	panic(fmt.Errorf("not implemented: Resources - resources"))
}

// Resource is the resolver for the resource field.
func (r *queryResolver) Resource(ctx context.Context, id string) (*model.Resource, error) {
	panic(fmt.Errorf("not implemented: Resource - resource"))
}

// FeatureFlags is the resolver for the featureFlags field.
func (r *queryResolver) FeatureFlags(ctx context.Context, limit *int, offset *int) ([]*model.FeatureFlag, error) {
	panic(fmt.Errorf("not implemented: FeatureFlags - featureFlags"))
}

// FeatureFlag is the resolver for the featureFlag field.
func (r *queryResolver) FeatureFlag(ctx context.Context, id string) (*model.FeatureFlag, error) {
	panic(fmt.Errorf("not implemented: FeatureFlag - featureFlag"))
}

// Ping is the resolver for the ping field.
func (r *queryResolver) Ping(ctx context.Context) (string, error) {
	return "pong", nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Permission returns generated.PermissionResolver implementation.
func (r *Resolver) Permission() generated.PermissionResolver { return &permissionResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type permissionResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *departmentResolver) Description(ctx context.Context, obj *model.Department) (*string, error) {
	return obj.Description, nil
}
func (r *featureFlagResolver) Description(ctx context.Context, obj *model.FeatureFlag) (*string, error) {
	return obj.Description, nil
}
func (r *featureFlagResolver) IsEnabled(ctx context.Context, obj *model.FeatureFlag) (bool, error) {
	return obj.IsEnabled, nil
}
func (r *positionResolver) Description(ctx context.Context, obj *model.Position) (*string, error) {
	panic(fmt.Errorf("not implemented: Description - description"))
}
func (r *resourceResolver) Description(ctx context.Context, obj *model.Resource) (*string, error) {
	panic(fmt.Errorf("not implemented: Description - description"))
}
func (r *roleResolver) Description(ctx context.Context, obj *model.Role) (*string, error) {
	panic(fmt.Errorf("not implemented: Description - description"))
}
func (r *stackResolver) Description(ctx context.Context, obj *model.Stack) (*string, error) {
	panic(fmt.Errorf("not implemented: Description - description"))
}
func (r *Resolver) Department() generated.DepartmentResolver { return &departmentResolver{r} }
func (r *Resolver) FeatureFlag() generated.FeatureFlagResolver { return &featureFlagResolver{r} }
func (r *Resolver) Position() generated.PositionResolver { return &positionResolver{r} }
func (r *Resolver) Resource() generated.ResourceResolver { return &resourceResolver{r} }
func (r *Resolver) Role() generated.RoleResolver { return &roleResolver{r} }
func (r *Resolver) Stack() generated.StackResolver { return &stackResolver{r} }
type departmentResolver struct{ *Resolver }
type featureFlagResolver struct{ *Resolver }
type positionResolver struct{ *Resolver }
type resourceResolver struct{ *Resolver }
type roleResolver struct{ *Resolver }
type stackResolver struct{ *Resolver }
*/
